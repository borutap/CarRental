// <auto-generated />
using System;
using CarRentalApi.Services.Databases;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CarRentalApi.Services.Migrations
{
    [DbContext(typeof(RentalDbContext))]
    [Migration("20211215220647_InitialCommit")]
    partial class InitialCommit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CarRentalApi.Services.Models.Quote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("GeneratedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasPrecision(14, 2)
                        .HasColumnType("decimal(14,2)");

                    b.Property<Guid?>("RentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.HasIndex("RentId")
                        .IsUnique()
                        .HasFilter("[RentId] IS NOT NULL");

                    b.ToTable("Quotes");
                });

            modelBuilder.Entity("CarRentalApi.Services.Models.Rent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReturnTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("Rents");
                });

            modelBuilder.Entity("Car_Rental.Models.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EnginePower")
                        .HasColumnType("int");

                    b.Property<string>("EnginePowerType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("43fa46d1-1475-4650-83f5-a93334ea1624"),
                            Capacity = 5,
                            Description = "Fiat Punto",
                            EnginePower = 120,
                            EnginePowerType = "PB",
                            ModelId = new Guid("933afee2-fbb1-4174-9fb4-16ac4b27a080"),
                            Year = 2005
                        },
                        new
                        {
                            Id = new Guid("ea5a9930-fc9d-40d9-92ed-43da8a33997e"),
                            Capacity = 6,
                            Description = "Fiat Punto",
                            EnginePower = 140,
                            EnginePowerType = "PB",
                            ModelId = new Guid("933afee2-fbb1-4174-9fb4-16ac4b27a080"),
                            Year = 2002
                        },
                        new
                        {
                            Id = new Guid("c8f352d4-e6ab-48a2-9968-072df520dd46"),
                            Capacity = 7,
                            Description = "Audi RS7",
                            EnginePower = 220,
                            EnginePowerType = "PB",
                            ModelId = new Guid("84d23d56-6be7-48e7-b0e1-51166a558009"),
                            Year = 2015
                        });
                });

            modelBuilder.Entity("Car_Rental.Models.VehicleModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DefaultPrice")
                        .HasPrecision(14, 2)
                        .HasColumnType("decimal(14,2)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VehicleModels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("933afee2-fbb1-4174-9fb4-16ac4b27a080"),
                            Brand = "Fiat",
                            Currency = "PLN",
                            DefaultPrice = 50m,
                            Model = "Punto"
                        },
                        new
                        {
                            Id = new Guid("84d23d56-6be7-48e7-b0e1-51166a558009"),
                            Brand = "Audi",
                            Currency = "PLN",
                            DefaultPrice = 80m,
                            Model = "RS7"
                        });
                });

            modelBuilder.Entity("CarRentalApi.Services.Models.Quote", b =>
                {
                    b.HasOne("Car_Rental.Models.VehicleModel", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId");

                    b.HasOne("CarRentalApi.Services.Models.Rent", null)
                        .WithOne("Quote")
                        .HasForeignKey("CarRentalApi.Services.Models.Quote", "RentId");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("CarRentalApi.Services.Models.Rent", b =>
                {
                    b.HasOne("Car_Rental.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Car_Rental.Models.Vehicle", b =>
                {
                    b.HasOne("Car_Rental.Models.VehicleModel", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("CarRentalApi.Services.Models.Rent", b =>
                {
                    b.Navigation("Quote");
                });
#pragma warning restore 612, 618
        }
    }
}
